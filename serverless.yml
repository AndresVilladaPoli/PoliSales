service: "remix-serverless-app"

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-s3-sync
  - serverless-iam-roles-per-function

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    sourcesContent: false
    exclude: ["@aws-sdk/*"]
    target: "node18"
    platform: "node"
  s3Sync:
    buckets:
      - bucketNameKey: WebsiteBucketName
        bucketPrefix: assets/
        localDir: build/client/assets
        params:
          - "assets/**/*":
              CacheControl: "public, max-age=31536000"
      - bucketNameKey: WebsiteBucketName
        bucketPrefix: public/img/
        localDir: public/img
        params:
          - "public/img/**/*":
              CacheControl: "public, max-age=31536000"
      - bucketNameKey: WebsiteBucketName
        localDir: public
        params:
          - favicon.ico:
              CacheControl: "public, max-age=3600"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
    DYNAMODB_TABLE: polisales
    DYNAMODB_TABLE_GSI1: GSI1
    DYNAMODB_TABLE_GSI2: GSI2
    DYNAMODB_TABLE_GSI3: GSI3
    DYNAMODB_TABLE_GSI4: GSI4
    DYNAMODB_TABLE_GSI5: GSI5
    DYNAMODB_TABLE_GSI6: GSI6
    DOMAIN: https://d373ge575lxvrz.cloudfront.net
    FILES_BUCKET: !Ref FilesBucket

functions:
  remix:
    handler: server.handler
    description: My Remix app!
    environment:
      TABLE_NAME: tableName
      SESSION_SECRET: zt0VM1l6T8Fsomq
      COGNITO_DOMAIN: https://polisale.auth.us-east-1.amazoncognito.com
      APP_CLIENT_ID: 71lsi0atv0kc0km0tomrsi4gfg
      APP_CLIENT_SECRET: 1ddf9n1ehtjgh8lh1va30f9vd2bsi95cl1ehadl858aidagdjbmv
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !GetAtt PoliSalesTable.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !Join
          - ""
          - - !GetAtt PoliSalesTable.Arn
            - "/index/GSI1"
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !Join
          - ""
          - - !GetAtt PoliSalesTable.Arn
            - "/index/GSI2"
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !Join
          - ""
          - - !GetAtt PoliSalesTable.Arn
            - "/index/GSI3"
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !Join
          - ""
          - - !GetAtt PoliSalesTable.Arn
            - "/index/GSI4"
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !Join
          - ""
          - - !GetAtt PoliSalesTable.Arn
            - "/index/GSI5"
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !Join
          - ""
          - - !GetAtt PoliSalesTable.Arn
            - "/index/GSI6"
    events:
      - httpApi:
          method: any
          path: "/{proxy+}"

resources:
  Resources:
    PoliSalesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        DeletionProtectionEnabled: true
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
          - AttributeName: GSI2PK
            AttributeType: S
          - AttributeName: GSI2SK
            AttributeType: S
          - AttributeName: GSI3PK
            AttributeType: S
          - AttributeName: GSI3SK
            AttributeType: S
          - AttributeName: GSI4PK
            AttributeType: S
          - AttributeName: GSI4SK
            AttributeType: S
          - AttributeName: GSI5PK
            AttributeType: S
          - AttributeName: GSI5SK
            AttributeType: S
          - AttributeName: GSI6PK
            AttributeType: S
          - AttributeName: GSI6SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_GSI1}
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_GSI2}
            KeySchema:
              - AttributeName: GSI2PK
                KeyType: HASH
              - AttributeName: GSI2SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_GSI3}
            KeySchema:
              - AttributeName: GSI3PK
                KeyType: HASH
              - AttributeName: GSI3SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_GSI4}
            KeySchema:
              - AttributeName: GSI4PK
                KeyType: HASH
              - AttributeName: GSI4SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_GSI5}
            KeySchema:
              - AttributeName: GSI5PK
                KeyType: HASH
              - AttributeName: GSI5SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_GSI6}
            KeySchema:
              - AttributeName: GSI6PK
                KeyType: HASH
              - AttributeName: GSI6SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: filesbucket-polisales
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
                - POST
              AllowedOrigins:
                - ${self:provider.environment.DOMAIN}
              Id: CORSRule
              MaxAge: 600
        LifecycleConfiguration:
          Rules:
            - Id: ExpireRule
              Status: Enabled
              ExpirationInDays: 30
    # S3 bucket for static assets
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties: {}
    # Allow CloudFront to use GetObject in the WebsiteBucket
    WebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity to Access ${self:service} Website Bucket ${self:provider.stage}
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - /
                  - - Fn::GetAtt:
                        - WebsiteBucket
                        - Arn
                    - "*"
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                    - WebsiteOriginAccessIdentity
                    - S3CanonicalUserId

    # Use CloudFront in front of the Remix API Gateway endpoint
    RemixCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: RemixCachePolicy
          DefaultTTL: 60
          MinTTL: 0
          MaxTTL: 60
          ParametersInCacheKeyAndForwardedToOrigin:
            HeadersConfig:
              HeaderBehavior: none
            EnableAcceptEncodingGzip: true
            QueryStringsConfig:
              QueryStringBehavior: all
            CookiesConfig:
              CookieBehavior: all

    # CloudFront Configuration
    CDN:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - WebsiteBucket
        - HttpApi
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - WebsiteBucket
                  - DomainName
              Id: StaticOrigin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - /
                    - - origin-access-identity
                      - cloudfront
                      - !Ref WebsiteOriginAccessIdentity
            - DomainName:
                Fn::Join:
                  - ""
                  - - Ref: HttpApi
                    - ".execute-api.${self:provider.region}.amazonaws.com"
              Id: RemixOrigin
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
                OriginSSLProtocols: [TLSv1.2]

          # By default, all requests go to remix
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            CachePolicyId:
              Ref: RemixCachePolicy
            TargetOriginId: RemixOrigin
            ViewerProtocolPolicy: redirect-to-https
          # Requests to /static go to S3
          CacheBehaviors:
            - PathPattern: "assets/*"
              AllowedMethods:
                - GET
                - HEAD
              CachedMethods:
                - GET
                - HEAD
              Compress: true
              ForwardedValues:
                QueryString: true
                Cookies:
                  Forward: none
              TargetOriginId: StaticOrigin
              ViewerProtocolPolicy: redirect-to-https
            - PathPattern: "public/*"
              AllowedMethods:
                - GET
                - HEAD
              CachedMethods:
                - GET
                - HEAD
              Compress: true
              ForwardedValues:
                QueryString: true
                Cookies:
                  Forward: none
              TargetOriginId: StaticOrigin
              ViewerProtocolPolicy: redirect-to-https
            # Special rule for browser favicon requests to also go to S3 origin
            - PathPattern: "/favicon.*"
              AllowedMethods:
                - GET
                - HEAD
              CachedMethods:
                - GET
                - HEAD
              Compress: false
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              TargetOriginId: StaticOrigin
              ViewerProtocolPolicy: redirect-to-https
          Comment: ${self:service}-${self:provider.stage}
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
  Outputs:
    WebsiteBucketName:
      Value:
        Ref: WebsiteBucket
    DistributionID:
      Value:
        Ref: CDN
    WebsiteDomain:
      Value:
        Fn::GetAtt: [CDN, DomainName]
